class Lorry:
можно наследовать только один класс, интерфейсы не наследуют а implements

необходимо также реализовать абстрактный метод класса-родителя либо объявлять класс Lorry абстрактным

не создан класс Engine, либо изменить тип переменной на String

2 отдельных интерфейса на движение и остановку излишне, так как автомобиль должен обладать обоими этими свойствами

я бы переименовал интерфейс Moveable в Function, где будут описаны основные методы функциональности любого авто (шаблон)
из абстрактного класса Car убрал бы методы start и open и перенес бы в интерфейс Function

В класс car нужно добавить конструктор



Доделать:
Николай, доброе утро!
1. По поводу билдера - мне не очень нравится реализация и объясню почему.
Сам по себе билдер создается для того, чтобы мы могли иметь некое временное(не полное) состояние объекта.
Т.е. когда мы хотим создать объект класса Person, мы хотим заполнить только имя и адрес проживания, всё остальное
не является для нас обязательным.
В твоей же реализации когда мы пытаемся создать человечка из России или USA мы хардкодом задаем ему
значения - это уже не паттерн билдер. Надо обдумать как сделать лучше. Можно посмотреть как работает аннотация
@Builder в библиотеке lombok.
2. По поводу рефакторинга кода - я бы также добавил, чтобы в классе Car сделать поле engine приватным и возможно
заменить класс Engine на интерфейс - для менее связного кода.
3. Для лучшего понимания как работает полиморфизм, в классе Main можно создать коллекцию List<Phigura> и добавить
туда ранее созданные объекты. После этого мы идет в цикле по каждому объекту коллекции и вызываем метод getArea().
Тем самым мы увидим основной функционал полиморфизма - переопределение методов. Также можно сделать реальный расчёт площади.
Отлично, спасибо за работу!
